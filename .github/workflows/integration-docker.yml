name: integration with docker

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]

permissions: 
  packages: write
  security-events: write
  id-token: write
  contents: read
  attestations: write
  
env:
  REGISTRY: ghcr.io
  REGISTRY_USER: ${{ github.actor }}
  REGISTRY_PASS: ${{ secrets.GITHUB_TOKEN }}
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          labels: org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASS }}

      - name: Docker Build
        id: build
        uses: docker/build-push-action@v6
        with:
          #load: true
          push: true
          provenance: mode=max
          file: Dockerfile.cicd
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # Code Security must be enbled for SARIF
      # - name: Run Trivy Scanner - SARIF
      #   uses: aquasecurity/trivy-action@0.30.0
      #   with:
      #     scan-ref: ${{ steps.build.outputs.imageid }}
      #     format: sarif
      #     output: trivy-results.sarif

      # - name: Upload Trivy scan results to GitHub Security tab
      #   uses: github/codeql-action/upload-sarif@v3
      #   if: always()
      #   with:
      #     sarif_file: trivy-results.sarif

      - name: Run Trivy Scanner
        uses: aquasecurity/trivy-action@0.30.0
        with:
          scan-ref: ${{ steps.build.outputs.imageid }}
          severity: CRITICAL,HIGH
          exit-code: 1

      - name: Docker Push
        id: push
        uses: docker/build-push-action@v6
        with:
          push: true
          file: Dockerfile.cicd
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # - name: Generate artifact attestation
      #   uses: actions/attest-build-provenance@v2
      #   with:
      #     subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      #     subject-digest: ${{ steps.push.outputs.digest }}
      #     push-to-registry: true
